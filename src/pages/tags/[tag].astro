---
import type {
	InferGetStaticParamsType,
	// InferGetStaticPropsType,
	GetStaticPaths,
} from 'astro';

import Layout from '@/layouts/Layout.astro';
import BlogPost from '@/components/BlogPost.astro';
import TagSelector from '@/components/TagSelector.astro';

export const getStaticPaths = (async () => {
	const allPosts = await Astro.glob('../posts/*.md');
	const uniqueTags = [
		...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
	];

	// const returnedParams = uniqueTags.map((tag) => ({
	// 	params: { tag },
	// 	props: { posts: allPosts },
	// }));
	// console.log(returnedParams);
	return uniqueTags.map((tag) => {
		const filteredPosts = allPosts.filter((post) =>
			post.frontmatter.tags.includes(tag)
		);
		return {
			params: { tag },
			props: { posts: filteredPosts, uniqueTags },
		};
	});
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
// type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { tag } = Astro.params as Params;
const { posts, uniqueTags } = Astro.props;
---

<Layout title={tag}>
	<div
		class="h-full w-full justify-center space-y-5 p-10 text-center text-cyan-50"
	>
		<h1 class="text-mutedTxt">Posts tagged with: {tag}</h1>
		<hr class="mx-auto w-[50%]" />
		<ul class="space-y-5">
			{
				posts.map((post) => (
					<BlogPost url={post.url} title={post.frontmatter.title} />
				))
			}
		</ul>
		<hr class="mx-auto w-[50%]" />
		<div class="mt-5 flex flex-wrap justify-center px-10">
			{uniqueTags.map((tag) => <TagSelector tag={tag} />)}
		</div>
	</div>
</Layout>
